//#pragma enable_d3d11_debug_symbols
#pragma kernel ForwardReLU
#pragma kernel BackwardReLU

#pragma kernel ForwardSoftmax
#pragma kernel BackwardSoftmax

#pragma kernel ForwardSigmoid
#pragma kernel BackwardSigmoid

#pragma kernel ForwardTanh
#pragma kernel BackwardTanh

#pragma kernel ForwardLeakyReLU
#pragma kernel BackwardLeakyReLU

// 定义线程组大小
#define THREAD_GROUP_SIZE_X 8
#define THREAD_GROUP_SIZE_Y 8
#define THREAD_GROUP_SIZE 64

StructuredBuffer<float> inputBuffer;
StructuredBuffer<float> dOutputBuffer;
RWStructuredBuffer<float> outputBuffer;
RWStructuredBuffer<float> dInputBuffer;

// 矩阵维度
uint inputCount;
uint batch;

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void ForwardReLU(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        outputBuffer[index] = max(inputBuffer[index], 0.0);
    }
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void BackwardReLU(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        dInputBuffer[index] = dOutputBuffer[index] * (inputBuffer[index] > 0.0 ? 1.0 : 0.0);
    }
}


// Softmax 计算
[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void ForwardSoftmax(uint3 id : SV_DispatchThreadID)
{
    uint y = id.y;
    uint x = id.x;
    uint i = 0;

    if (x < inputCount && y < batch)
    {
        uint index = id.y * inputCount + id.x;

        // 计算 softmax 输出
        float maxVal = -1e7;
        for (i = 0; i < inputCount; ++i)
        {
            uint idx = id.y * inputCount + i;
            if (inputBuffer[idx] > maxVal)
                maxVal = inputBuffer[idx];
        }

        float sumExp = 0;
        for (i = 0; i < inputCount; ++i)
        {
            uint idx = id.y * inputCount + i;
            sumExp += exp(inputBuffer[idx] - maxVal);
        }

        outputBuffer[index] = exp(inputBuffer[index] - maxVal) / sumExp;
    }
}

//[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
//void BackwardSoftmax(uint3 id : SV_DispatchThreadID)
//{
//    if (id.x < inputCount && id.y < batch)
//    {
//        uint index = id.y * inputCount + id.x;
//        float sum = 0;
//        for (uint i = 0; i < inputCount; ++i)
//        {
//            uint idx = id.y * inputCount + i;
//            sum += dOutputBuffer[idx] * outputBuffer[idx];
//        }
//        dInputBuffer[index] = (dOutputBuffer[index] - sum) * outputBuffer[index];
//    }
//}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void BackwardSoftmax(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        dInputBuffer[index] = dOutputBuffer[index];
    }
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void ForwardSigmoid(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        outputBuffer[index] = 1.0 / (1.0 + exp(-inputBuffer[index]));
    }
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void BackwardSigmoid(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        dInputBuffer[index] = dOutputBuffer[index] * outputBuffer[index] * (1.0 - outputBuffer[index]);
    }
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void ForwardTanh(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        float expVal = exp(-2.0 * inputBuffer[index]);
        outputBuffer[index] = 2.0 / (1.0 + expVal) - 1.0;
        //outputBuffer[index] = tanh(inputBuffer[index]);

    }
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void BackwardTanh(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        dInputBuffer[index] = dOutputBuffer[index] * (1.0 - outputBuffer[index] * outputBuffer[index]);
    }
}


[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void ForwardLeakyReLU(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        outputBuffer[index] = inputBuffer[index] > 0 ? inputBuffer[index] : 0.01;
    }
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, 1)]
void BackwardLeakyReLU(uint3 id : SV_DispatchThreadID)
{
    if (id.x < inputCount && id.y < batch)
    {
        uint index = id.y * inputCount + id.x;
        dInputBuffer[index] = dOutputBuffer[index] * (inputBuffer[index] > 0.0 ? 1.0 : 0.01);
    }
}
