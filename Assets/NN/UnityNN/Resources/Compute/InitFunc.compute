//#pragma enable_d3d11_debug_symbols
#pragma kernel InitWeightsRandom 
#pragma kernel InitWeightsXavier
#pragma kernel InitWeightsHe
#pragma kernel InitZero


// 定义线程组大小
#define THREAD_GROUP_SIZE_X 8
#define THREAD_GROUP_SIZE_Y 8
#define THREAD_GROUP_SIZE 64



RWStructuredBuffer<float> weightBuffer;
RWStructuredBuffer<float> targetBuffer;




//uint biasCount;
uint weightCount;
float weightScale; //float scale = 1.0 / sqrt(1.0 * weightCount);
float weightStdDev; //float stdDev = sqrt(2.0 / weightCount);

uint bufferCount;

const static float PI = 3.14159274;


 
//返回值在-1到1
//float random(uint seed)
//{
//    seed = (seed << 13) ^ seed;
//    return (1.0 - ((seed * (seed * seed * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);
//}

//返回值在0到1
float random(uint seed)
{
    seed = (seed << 13) ^ seed;
    return 0.5 * ((seed * (seed * seed * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0;
}

 
float nextGaussian(uint seed)
{
    double u1 = 1.0 - random(seed);
    double u2 = 1.0 - random(seed + 1);
    return sqrt(-2.0 * log(u1)) * sin(2.0 * PI * u2); // 使用 Box-Muller 变换生成正态分布的随机数
}
 

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void InitWeightsRandom(uint3 id : SV_DispatchThreadID)
{
    if (id.x < weightCount)
    {
        uint index = id.x;
        weightBuffer[index] = nextGaussian(index) * 0.01;
    }
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void InitWeightsXavier(uint3 id : SV_DispatchThreadID)
{
    if (id.x < weightCount)
    {
        uint index = id.x;
        
        float scale = weightScale;
        
        weightBuffer[index] = random(index) * 2 * scale - scale;
    }
}

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void InitWeightsHe(uint3 id : SV_DispatchThreadID)
{
    if (id.x < weightCount)
    {
        uint index = id.x;
        
        float stdDev = weightStdDev; // 计算标准差
        
        weightBuffer[index] = nextGaussian(index) * stdDev;
    }
}
 

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void InitZero(uint3 id : SV_DispatchThreadID)
{
    if (id.x < bufferCount)
    {
        uint index = id.x;
        targetBuffer[index] = 0;
    }
}
 
